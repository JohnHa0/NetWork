function operator(proxies) {
  const filterPattern = /(?:Ë¥≠‰π∞|ÂæÆ‰ø°|Á¶ÅÊ≠¢|ÂÆòÁΩë|ÊµÅÈáè|ËøáÊúü|ÁôªÂΩï|ÂïÜ‰∏ö|Èù¢Êùø)/i;

  const renameRules = [
    // Ôºà‰øùÁïô‰Ω†ÂéüÊúâÁöÑ renameRulesÔºâ
    { pattern: /üá®üá≥ ‰∏≠ÂõΩ-(\S+)/g, replacement: "üá®üá≥$1" },
    { pattern: /(üá≠üá∞|üáØüáµ|üá∞üá∑|üá∏üá¨|üá∫üá∏|üá¨üáß|üá´üá∑|üáÆüá™|üá¶üá∫|üá∑üá∫|üá©üá™|üáÆüá≥|üá®üá¶) ‰∏≠ÂõΩ-/g, replacement: "$1" },
    { pattern: /(IEPL|IPLC|VPDN)(\s*(‰∏ìÁ∫ø|‰º†Ëæì|‰∏≠Áªß|ÂïÜÂÆΩ))?/g, replacement: "$1" },
    { pattern: /Â§öÂçèËÆÆÊ†áÁ≠æ‰∫§Êç¢ËôöÊãü‰∏ìÁî®ÁΩë/g, replacement: "MPLS" },
    { pattern: /Âõ∫Êé•/g, replacement: "Âõ∫ÁΩë" },
    { pattern: /(\s*(C|L)\s*)(\d+)/g, replacement: " $2$3" },
    { pattern: /1Gbps/gi, replacement: "1G" },
    { pattern: /500Mbps/gi, replacement: "500M" },
    { pattern: /(\d+)Mbps/gi, replacement: "$1M" },
    { pattern: /([1-9])ÂÄç/gi, replacement: "x$1" },
    { pattern: /(\d)[xX]/g, replacement: "x$1" },
    { pattern: /(Ê≤πÂ∞ñÊó∫Âæ°Èáë¬∑ÂõΩÂ≥Ø|‰∫¨ÁïøÈÅìÊùøÊ°•|Ï†ÑÎùºÎ∂ÅÎèÑ Ï†ÑÏ£ºÏãú)/g, replacement: "" },
    { pattern: /(Equinix|Legacy Magic|Magic)\s*/g, replacement: "" },
    { pattern: /(HBO TVB|Netflix Âä®ÁîªÁñØ|Netflix|Âä®ÁîªÁñØ)/gi, replacement: "NF" },
    { pattern: /(Áí∞ÁêÉÂÖ®ÂüüÈõªË®ä|ÂêçÊ∞£ÈÄöÈõªË®ä)/g, replacement: "HGC" },
    { pattern: /(Âè∞ÊπæÂõ∫ÁΩë|HiNet)/g, replacement: "TW" },
    { pattern: /üè¥‚Äç‚ò†Ô∏èËôöÈÄöÈìæÊé•PVCC/g, replacement: "üè¥‚Äç‚ò†Ô∏èËôöÈÄö" },
    { pattern: /Next generation AnyPath¬Æ.*?CloudBlades \d*/gi, replacement: "DIZTNA" },
    { pattern: /Ê∞∏‰πÖËôöÈÄöË∑ØËøû/g, replacement: "ËôöÈÄö" },
    { pattern: /ASYNCHRONOUS TRANSFERMODE/gi, replacement: "ATM" },
    { pattern: /(È´òÁ∫ß|ÂÆûÈ™åÊÄß|‰∏¥Êó∂Êé•ÂÖ•|ÂéüÁîüÊ∏∏ÊàèËß£ÈîÅ|‰∏≠Áªß|‰º†Ëæì)/g, replacement: "" },
    { pattern: /(Áè≠Âä†ÁΩóÂ∞î|‡§¨‡•á‡§Ç‡§ó‡§≤‡•Å‡§∞‡•Å|‡§è‡§Ø‡§∞‡§ü‡•á‡§≤)/g, replacement: "" },
    { pattern: /„ÇΩ„Éï„Éà„Éê„É≥„ÇØ|SoftBank/gi, replacement: "SB" },
    { pattern: /Rakuten/gi, replacement: "RK" },
    { pattern: /docomo/gi, replacement: "DCM" },
    { pattern: /KDDI/gi, replacement: "KDDI" },
    { pattern: /NTT/gi, replacement: "NTT" },
    { pattern: /\s{2,}/g, replacement: " " },
    { pattern: /([^ ])(üá®üá≥|üá≠üá∞|üáØüáµ|üá∞üá∑|üá∫üá∏|üá∏üá¨|üá´üá∑|üá∑üá∫|üáÆüá≥|üá®üá¶|üá¨üáß|üá©üá™|üáÆüá™|üè¥‚Äç‚ò†Ô∏è)/g, replacement: "$1 $2" },
    { pattern: /(NF)\s+(NF)/g, replacement: "$1" }
  ];

  const nameCount = {}; // Áî®‰∫éËøΩË∏™ÈáçÂêçÊ¨°Êï∞

  return proxies
    .filter(proxy => !filterPattern.test(proxy.name)) // ËøáÊª§ÊïèÊÑüÂÖ≥ÈîÆËØç
    .map(proxy => {
      let newName = proxy.name;
      for (const rule of renameRules) {
        newName = newName.replace(rule.pattern, rule.replacement);
      }
      newName = newName.trim();

      // ÂéªÈáçÂ§ÑÁêÜ
      if (nameCount[newName]) {
        nameCount[newName] += 1;
        newName = `${newName}-${nameCount[newName]}`;
      } else {
        nameCount[newName] = 1;
      }

      return {
        ...proxy,
        name: newName
      };
    });
}
